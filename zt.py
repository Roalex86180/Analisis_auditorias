import streamlit as st
import pandas as pd
import io
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px  #
import re
from collections import Counter
from kpi import process_data

# Configuraci√≥n inicial de la app
st.set_page_config(page_title="Auditor√≠as T√©cnicos", layout="wide")
st.title("üìã An√°lisis de Auditor√≠as de T√©cnicos de Telecomunicaciones")

# Subir archivo
archivo = st.file_uploader("üìÅ Sube el archivo Excel con los datos de auditor√≠a", type=["xlsx"])
tab1, tab2 = st.tabs(["üìã Informaci√≥n de T√©cnicos", "üõ†Ô∏è Informaci√≥n de Auditores"])

if archivo:
    # Cargar todas las hojas del archivo Excel
    xls = pd.ExcelFile(archivo)
    hojas = xls.sheet_names
    data = pd.concat([xls.parse(hoja) for hoja in hojas], ignore_index=True)

    # Normalizar columnas
    data.columns = data.columns.str.strip()

    # --- Correcciones de tipos para evitar ArrowTypeError ---
    # Asegurarnos de que las columnas de nombre/t√©cnico sean strings
    col_tecnico = "Nombre de T√©cnico/Copiar el del Wfm"
    data[col_tecnico] = data[col_tecnico].fillna("").astype(str)
    # Y tambi√©n cualquier columna de iconos/t√©cnico final
    # (Se volver√° a convertir tras crearlas, pero las dejamos listas)
    
    with tab1:
        # Opciones de filtro
        tecnicos = sorted(data[col_tecnico].unique())
        tecnico = st.selectbox("üë∑‚Äç‚ôÇÔ∏è T√©cnico", ["Todos"] + tecnicos)
        empresas = sorted(data["Empresa"].fillna("").astype(str).unique())
        empresa = st.selectbox("üè¢ Empresa", ["Todas"] + empresas)
        tipo_auditoria = sorted(data["Tipo de Auditoria"].fillna("").astype(str).unique())
        tipo = st.selectbox("üîç Tipo de Auditor√≠a", ["Todas"] + tipo_auditoria)
        patente = st.text_input("üöó Buscar por Patente").strip()
        orden_trabajo = st.text_input("üìÑ Buscar por N√∫mero de Orden de Trabajo / ID Externo").strip()

        # Aplicar filtros
        df_filtrado = data.copy()
        if tecnico != "Todos":
            df_filtrado = df_filtrado[df_filtrado[col_tecnico] == tecnico]
        if empresa != "Todas":
            df_filtrado = df_filtrado[df_filtrado["Empresa"] == empresa]
        if tipo != "Todas":
            df_filtrado = df_filtrado[df_filtrado["Tipo de Auditoria"] == tipo]
        if patente:
            df_filtrado = df_filtrado[
                df_filtrado["Patente Camioneta"].astype(str).str.contains(patente, case=False)
            ]
        if orden_trabajo:
            df_filtrado = df_filtrado[
                df_filtrado["N√∫mero de Orden de Trabajo/ ID externo"]
                .astype(str)
                .str.contains(orden_trabajo, case=False)
            ]
        st.markdown("### üìä Datos filtrados")
        st.dataframe(df_filtrado, use_container_width=True)

        # ----------------- Ranking T√©cnicos m√°s Auditados -----------------
        st.markdown("### üèÜ Ranking T√©cnicos m√°s Auditados")
        if col_tecnico in data.columns and "Empresa" in data.columns and "Fecha" in data.columns:
            ranking = (
                data.groupby([col_tecnico, "Empresa"])
                .size()
                .reset_index(name="Cantidad de Auditor√≠as")
                .rename(columns={col_tecnico: "T√©cnico"})
                .sort_values(by="Cantidad de Auditor√≠as", ascending=False)
            )
            # Fechas de Auditor√≠a
            fechas = (
                data.groupby([col_tecnico, "Empresa"])["Fecha"]
                .apply(lambda x: ", ".join(pd.to_datetime(x).dt.strftime("%d/%m/%Y")))
                .reset_index(name="Fechas de Auditor√≠a")
            )
            ranking["Fechas de Auditor√≠a"] = fechas["Fechas de Auditor√≠a"]
            st.dataframe(ranking, use_container_width=True)
        else:
            st.error("Faltan columnas necesarias para el ranking de t√©cnicos.")

        # ----------------- KPI Auditor√≠as por Empresa -----------------
        st.markdown("### üè¢ Auditor√≠as por Empresa")
        auditorias_empresa = (
            data["Empresa"]
            .value_counts()
            .rename_axis("Empresa")
            .reset_index(name="Cantidad de Auditor√≠as")
        )
        st.dataframe(auditorias_empresa, use_container_width=True)
        st.subheader("üìà Auditor√≠as por Empresa")
        fig = px.bar(
            auditorias_empresa,
            x="Cantidad de Auditor√≠as",
            y="Empresa",
            orientation="h",
            color="Empresa",
            text="Cantidad de Auditor√≠as",
            color_discrete_sequence=px.colors.qualitative.Vivid,
        )
        fig.update_layout(
            xaxis_title="Cantidad de Auditor√≠as",
            yaxis_title="Empresa",
            yaxis=dict(autorange="reversed"),
            plot_bgcolor="white",
        )
        st.plotly_chart(fig, use_container_width=True)

        # ----------------- T√©cnicos con Stock Cr√≠tico de Herramientas -----------------
        st.markdown("### üîß T√©cnicos con Stock Cr√≠tico de Herramientas")

        herramientas_criticas = [
            "Power meter GPON",
            "VFL Luz visible para localizar fallas",
            "Limpiador de conectores tipo ‚ÄúOne Click‚Äù",
            "Deschaquetador de primera cubierta para DROP",
            "Deschaquetador de recubrimiento de FO 125micras Tipo Miller",
            "Cortadora de precisi√≥n 3 pasos",
            "Regla de corte",
            "Alcohol isopropilico 99%",
            "Pa√±os secos para FO",
            "Crimper para cable UTP",
            "Deschaquetador para cables con cubierta redonda (UTP, RG6 )",
            "Tester para cable UTP",
        ]

        def obtener_herramientas_faltantes(tecnico_data):
            faltantes = []
            for h in herramientas_criticas:
                if h not in tecnico_data or pd.isna(tecnico_data[h]) or tecnico_data[h] in ["No", "Falta", "0"]:
                    faltantes.append(h)
            return faltantes

        stock_h = (
            data.groupby([col_tecnico, "Empresa"], group_keys=False)
            .apply(lambda grp: pd.Series({
                "Herramientas Faltantes": obtener_herramientas_faltantes(grp.iloc[0])
            }))
            .reset_index()
            .rename(columns={col_tecnico: "T√©cnico"})
        )
        stock_h["Cantidad Faltantes"] = stock_h["Herramientas Faltantes"].map(len)
        stock_h = stock_h[stock_h["Cantidad Faltantes"] > 0].sort_values(by="Cantidad Faltantes", ascending=False)

        def agregar_icono_herr(row):
            if row["Cantidad Faltantes"] >= 2:
                return f"üî¥ {row['T√©cnico']}"
            elif row["Cantidad Faltantes"] == 1:
                return f"üü° {row['T√©cnico']}"
            else:
                return row["T√©cnico"]

        stock_h["T√©cnico Con Icono"] = stock_h.apply(agregar_icono_herr, axis=1)
        stock_h["Herramientas Faltantes"] = stock_h["Herramientas Faltantes"].apply(lambda lst: ", ".join(lst))

        # Asegurarnos de que "T√©cnico Con Icono" sea string
        stock_h["T√©cnico Con Icono"] = stock_h["T√©cnico Con Icono"].astype(str)

        total_tecs_h = stock_h.shape[0]
        st.markdown(f"**üî• Total t√©cnicos con stock cr√≠tico de herramientas: {total_tecs_h}**")

        empresas_h = stock_h["Empresa"].unique()
        empresa_sel_h = st.selectbox("üîé Filtrar por Empresa (Herramientas):", options=["Todas"] + list(empresas_h))
        if empresa_sel_h != "Todas":
            stock_h = stock_h[stock_h["Empresa"] == empresa_sel_h]

        st.dataframe(stock_h[["T√©cnico Con Icono", "Empresa", "Herramientas Faltantes"]], use_container_width=True)

        # Descarga Excel
        buf_h = io.BytesIO()
        with pd.ExcelWriter(buf_h, engine="xlsxwriter") as writer:
            stock_h[["T√©cnico Con Icono", "Empresa", "Herramientas Faltantes"]].rename(
                columns={"T√©cnico Con Icono": "T√©cnico"}
            ).to_excel(writer, index=False, sheet_name="Stock_Critico_Herramientas")
        buf_h.seek(0)
        st.download_button(
            label="üì• Descargar T√©cnicos con Stock Cr√≠tico Herramientas",
            data=buf_h,
            file_name="tecnicos_stock_critico_herramientas.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

        # Gr√°fico de stock cr√≠tico herramientas
        df_emp_h = (
            stock_h.groupby("Empresa")
            .size()
            .reset_index(name="Cantidad de T√©cnicos con Stock Cr√≠tico Herramientas")
            .sort_values(by="Cantidad de T√©cnicos con Stock Cr√≠tico Herramientas", ascending=False)
        )
        fig_h = px.bar(
            df_emp_h,
            x="Cantidad de T√©cnicos con Stock Cr√≠tico Herramientas",
            y="Empresa",
            orientation="h",
            color="Empresa",
            text="Cantidad de T√©cnicos con Stock Cr√≠tico Herramientas",
            color_discrete_sequence=px.colors.qualitative.Vivid,
        )
        fig_h.update_layout(
            xaxis_title="Cantidad de T√©cnicos con Stock Cr√≠tico de Herramientas",
            yaxis_title="Empresa",
            yaxis=dict(autorange="reversed"),
            plot_bgcolor="white",
        )
        st.plotly_chart(fig_h, use_container_width=True)

        # --- STOCK CR√çTICO EPP ---
        st.markdown("### ü¶∫ T√©cnicos con Stock Cr√≠tico de EPP")
        epp_criticos = [
            "Conos de seguridad", "Refugio de PVC", "Casco de Altura", "Barbiquejo",
            "Legionario Para Casco", "Guantes Cabritilla", "Guantes Dielectricos",
            "Guantes trabajo Fino", "Zapatos de Seguridad Dielectricos",
            "LENTE DE SEGURIDAD (CLAROS Y OSCUROS)", "Arnes Dielectrico",
            "Estrobo Dielectrico", "Cuerda de vida /Dielectrico", "Chaleco reflectante",
            "DETECTOR DE TENSION TIPO LAPIZ CON LINTERNA", "Bloqueador Solar"
        ]
        def obtener_epp_faltantes(tecnico_data):
            falt = []
            for e in epp_criticos:
                if e not in tecnico_data or pd.isna(tecnico_data[e]) or tecnico_data[e] in ["No", "Falta", "0"]:
                    falt.append(e)
            return falt

        stock_e = (
            data.groupby([col_tecnico, "Empresa"], group_keys=False)
            .apply(lambda grp: pd.Series({
                "EPP Faltantes": obtener_epp_faltantes(grp.iloc[0])
            }))
            .reset_index()
            .rename(columns={col_tecnico: "T√©cnico"})
        )
        stock_e["Cantidad Faltantes"] = stock_e["EPP Faltantes"].map(len)
        stock_e = stock_e[stock_e["Cantidad Faltantes"] > 0].sort_values(by="Cantidad Faltantes", ascending=False)

        epp_vitales = ["Casco de Altura", "Zapatos de Seguridad Dielectricos", "Arnes Dielectrico", "Estrobo Dielectrico"]
        def agregar_icono_epp(row):
            falt_v = [e for e in row["EPP Faltantes"] if e in epp_vitales]
            if len(falt_v) >= 2:
                return f"üî¥ {row['T√©cnico']}"
            elif len(falt_v) == 1:
                return f"üü° {row['T√©cnico']}"
            else:
                return row["T√©cnico"]

        stock_e["T√©cnico Con Icono"] = stock_e.apply(agregar_icono_epp, axis=1).astype(str)
        stock_e["EPP Faltantes"] = stock_e["EPP Faltantes"].apply(lambda lst: ", ".join(lst))

        total_tecs_e = stock_e.shape[0]
        st.markdown(f"**üî• Total t√©cnicos con stock cr√≠tico de EPP: {total_tecs_e}**")

        empresas_e = stock_e["Empresa"].unique()
        empresa_sel_e = st.selectbox("üîé Filtrar por Empresa (EPP):", options=["Todas"] + list(empresas_e))
        if empresa_sel_e != "Todas":
            stock_e = stock_e[stock_e["Empresa"] == empresa_sel_e]

        st.dataframe(stock_e[["T√©cnico Con Icono", "Empresa", "EPP Faltantes"]], use_container_width=True)

        buf_e = io.BytesIO()
        with pd.ExcelWriter(buf_e, engine="xlsxwriter") as writer:
            stock_e[["T√©cnico Con Icono", "Empresa", "EPP Faltantes"]].rename(
                columns={"T√©cnico Con Icono": "T√©cnico"}
            ).to_excel(writer, index=False, sheet_name="Stock_Critico_EPP")
        buf_e.seek(0)
        st.download_button(
            label="üì• Descargar T√©cnicos con Stock Cr√≠tico EPP",
            data=buf_e,
            file_name="tecnicos_stock_critico_epp.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

        # Gr√°fico de stock cr√≠tico EPP
        df_emp_e = (
            stock_e.groupby("Empresa")
            .size()
            .reset_index(name="Cantidad de T√©cnicos con Stock Cr√≠tico EPP")
            .sort_values(by="Cantidad de T√©cnicos con Stock Cr√≠tico EPP", ascending=False)
        )
        fig_e = px.bar(
            df_emp_e,
            x="Cantidad de T√©cnicos con Stock Cr√≠tico EPP",
            y="Empresa",
            orientation="h",
            color="Empresa",
            text="Cantidad de T√©cnicos con Stock Cr√≠tico EPP",
            color_discrete_sequence=px.colors.qualitative.Vivid,
        )
        fig_e.update_layout(
            xaxis_title="Cantidad de T√©cnicos con Stock Cr√≠tico de EPP",
            yaxis_title="Empresa",
            yaxis=dict(autorange="reversed"),
            plot_bgcolor="white",
        )
        st.plotly_chart(fig_e, use_container_width=True)

        # --- Resumen General de KPIs ---
        st.markdown("---")
        st.subheader("üìä Resumen General de Stock Cr√≠tico")
        st.metric(label="üî• Total T√©cnicos con EPP Cr√≠tico", value=total_tecs_e)
        st.metric(label="üöÄ Total T√©cnicos con Herramientas Cr√≠ticas", value=total_tecs_h)

        # Llamada a process_data si se desea
        kpis, empresa_kpis_df, total_auditorias, data = process_data(archivo)

    with tab2:
        # üéØ Dashboard de Auditores
        st.markdown("### üßë‚Äçüíº Ranking de Auditores por Trabajos Realizados")
        ranking_auditores = (
            data.groupby("Informaci√≥n del Auditor")
            .size()
            .reset_index(name="Cantidad de Auditor√≠as")
            .rename(columns={"Informaci√≥n del Auditor": "Auditor"})
            .sort_values(by="Cantidad de Auditor√≠as", ascending=False)
        )
        st.dataframe(ranking_auditores, use_container_width=True)

        if "Informaci√≥n del Auditor" in data.columns and "Empresa" in data.columns and "Fecha" in data.columns:
            distribucion = data.groupby(
                ["Informaci√≥n del Auditor", "Empresa"], group_keys=False
            ).agg(
                Cantidad_de_Auditorias=("Fecha", "size"),
                Fechas_de_Auditoria=("Fecha", lambda x: ", ".join(pd.to_datetime(x).dt.strftime("%d/%m/%Y"))),
            ).reset_index()
            st.write("KPI de Distribuci√≥n de Auditor√≠as entre Empresas con Fechas")
            st.dataframe(distribucion, use_container_width=True)
        else:
            st.error("Faltan columnas para KPI de distribuci√≥n de auditor√≠as.")

        # KPI Auditar√≠as por Regi√≥n
        st.subheader("üåé Auditor√≠as por Regi√≥n")
        aud_reg = (
            data.groupby("Region")
            .size()
            .reset_index(name="Cantidad de Auditor√≠as")
            .sort_values(by="Cantidad de Auditor√≠as", ascending=False)
        )
        fig_reg = px.bar(
            aud_reg,
            x="Cantidad de Auditor√≠as",
            y="Region",
            orientation="h",
            color="Region",
            text="Cantidad de Auditor√≠as",
            color_discrete_sequence=px.colors.qualitative.Set2,
        )
        fig_reg.update_layout(
            xaxis_title="Cantidad de Auditor√≠as",
            yaxis_title="Regi√≥n",
            yaxis=dict(autorange="reversed"),
            plot_bgcolor="white",
        )
        st.plotly_chart(fig_reg, use_container_width=True)

else:
    st.warning("‚ö†Ô∏è Por favor, sube un archivo Excel con las auditor√≠as.")